### BIOMOD2: sdm projections ###
### see source script inputs ###
### step 3:
##################
##### SET UP #####
##################
# load necessary packages
require(snowfall)
# reset sp_nm counter to first species
sp_nm = all_sp_nm[1]
library(biomod2)
library(stringr)
library(colorRamps)
library(rasterVis)
library(tools)
library(ncdf4)
library(gbm)
# set options for BIOMOD2 fixes in code (if assigned TRUE in source script)
if(apply_biomod2_fixes) {
# set raster package options
rasterOptions(tmpdir = dir_for_temp_files, timer = T, progress = "text", todisk = T)
# all model projection fixes to BIOMOD2 code created by Adam Vorsino
source(paste0(codeDir,"3a_project_mod.R"))
}
# convert species name to character object (in case the species are numbered)
sp_nm = as.character(sp_nm)
# replace species naming convention of "_" with "."
sp_dir = paste0(str_replace_all(sp_nm,"_", "."), "/")
require(snowfall)
# reset sp_nm counter to first species
sp_nm = all_sp_nm[1]
# load necessary packages
library(biomod2)
library(stringr)
library(colorRamps)
######################
##### FUNCTIONS ######
######################
# function to save display and save raster image
save_raster_fx = function(raster_img, out_nm) {
# save name of jpeg file to be created
jpeg_name = paste0(out_nm, ".jpg")
# create blank jpeg file
jpeg(jpeg_name, res = 300, units = "in", pointsize = 12,
width = 10, height = 8, quality = 90, bg = "white")
# plot image
plot(raster_img)
# save image file
dev.off()
# save name of tiff file to be created
tiff_name = paste0(out_nm, ".tif")
# save name of raster file to be created
out_raster_name = paste0(out_nm, ".tif")
# create blank tiff file
tiff(tiff_name, res = 300, units = "in", pointsize = 12,
width = 10, height = 8, compression = "lzw")
# plot image
plot(raster_img)
# save image file
dev.off()
# save raster data file
writeRaster(raster_img, out_raster_name, format="GTiff", overwrite = TRUE)
}
# function
Process_raster_data_BadtoGood = function(raster_var, out_nm, min_lim = NULL,
max_lim = NULL, mask_data = NULL){
# save name of jpeg file
jpeg_name = paste0(out_nm, ".jpg")
# save name of raster file to be created
out_raster_name = paste0(out_nm, ".tif")
# create blank jpeg file
jpeg(jpeg_name, res = 300, units = "in", pointsize = 12,
width = 14, height = 14, quality = 90, bg = "white")
# add minimum if default is set to NULL
if (is.null(min_lim)){
# find minimum from raster
min_lim = minValue(raster_var)
}
# add maximum if default is set to NULL
if (is.null(max_lim)){
# find maximum from raster
max_lim = maxValue(raster_var)
}
if (maxValue(raster_var)>max_lim) max_lim=maxValue(raster_var)
# set color ramp palette
col5<-colorRampPalette(c('red', 'gray96', 'darkgreen'))
# plot raster
plot(raster_var, col = col5(n = 99), breaks = seq(min_lim, max_lim, length.out = 100),
axes = FALSE, box = FALSE, legend = TRUE, legend.width = 1, legend.shrink = 0.75,
legend.args = list(text = "", side = 4, font = 2, line = 2.5, cex = 0.8),
axis.args = list(at = seq(min_lim, max_lim, (max_lim-min_lim)/10),
labels = seq(min_lim, max_lim, (max_lim-min_lim)/10)))
# check if mask data is NULL
if (!is.null(mask_data)){
# add mask to plot
plot(mask_data, add = TRUE)
}
# save jpeg image file
dev.off()
# save raster data file
writeRaster(raster_var, out_raster_name, format = "GTiff", overwrite = TRUE)
}
# function
Process_raster_data_NeutraltoGood = function(raster_var, out_nm, min_lim = NULL,
max_lim = NULL, mask_data = NULL){
# save name of jpeg file
jpeg_name = paste0(out_nm, ".jpg")
# save name of raster file to be created
out_raster_name = paste0(out_nm, ".tif")
# create blank jpeg file
jpeg(jpeg_name, res = 300, units = "in", pointsize = 12,
width = 14, height = 14, quality = 90, bg = "white")
# add minimum if default is set to NULL
if (is.null(min_lim)){
# find minimum from raster
min_lim = minValue(raster_var)
}
# add maximum if default is set to NULL
if (is.null(max_lim)){
# find maximum from raster
max_lim = maxValue(raster_var)
}
if (maxValue(raster_var)>max_lim) max_lim=maxValue(raster_var)
# set color ramp palette
col5<-colorRampPalette(c('gray96', 'darkgreen'))
# plot raster
plot(raster_var, col = col5(n = 99), breaks = seq(min_lim, max_lim, length.out = 100),
axes = FALSE, box = FALSE, legend = TRUE, legend.width = 1, legend.shrink = 0.75,
legend.args = list(text = "", side = 4, font = 2, line = 2.5, cex = 0.8),
axis.args = list(at = seq(min_lim, max_lim, (max_lim-min_lim)/10),
labels = seq(min_lim, max_lim, (max_lim-min_lim)/10)))
# check if mask data is NULL
if (!is.null(mask_data)){
# add mask to plot
plot(mask_data, add = TRUE)
}
# save jpeg image file
dev.off()
# save raster data file
writeRaster(raster_var, out_raster_name, format = "GTiff", overwrite=TRUE)
}
# function
Process_raster_data_NeutraltoBad = function(raster_var, out_nm, min_lim = NULL,
max_lim = NULL, mask_data = NULL){
# save name of jpeg file
jpeg_name = paste0(out_nm, ".jpg")
# save name of raster file to be created
out_raster_name = paste0(out_nm, ".tif")
# create blank tiff file
# create blank jpeg file
jpeg(jpeg_name, res = 300, units = "in", pointsize = 12,
width = 14, height = 14, quality = 90, bg = "white")
# add minimum if default is set to NULL
if (is.null(min_lim)){
# find minimum from raster
min_lim = minValue(raster_var)
}
# add maximum if default is set to NULL
if (is.null(max_lim)){
# find maximum from raster
max_lim = maxValue(raster_var)
}
# set color ramp palette
col5<-colorRampPalette(c('gray96', 'red'))
# plot raster
plot(raster_var, col = col5(n = 99), breaks = seq(min_lim, max_lim, length.out = 100),
axes = FALSE, box = FALSE, legend = TRUE, legend.width = 1, legend.shrink = 0.75,
legend.args = list(text = "", side = 4, font = 2, line = 2.5, cex = 0.8),
axis.args = list(at = seq(min_lim, max_lim, (max_lim-min_lim)/10),
labels = seq(min_lim, max_lim, (max_lim-min_lim)/10)))
# check if mask data is NULL
if (!is.null(mask_data)){
# add mask to plot
plot(mask_data, add = TRUE)
}
# save jpeg image file
dev.off()
# save raster data file
writeRaster(raster_var, out_raster_name, format = "GTiff", overwrite = TRUE)
}
# set mask layer to shapefile of the main Hawaiian islands
mask_layer = shapefile(paste0(mapDir, "Main_Hawaiian_Islands_simple3.shp"))
library(raster)
mask_layer = shapefile(paste0(mapDir, "Main_Hawaiian_Islands_simple3.shp"))
mapDir
